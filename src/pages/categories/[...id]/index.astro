---
import { Icon, type IconName } from "@/components/Elements/Icon"
import { PostCard } from "@/components/Elements/PostCard"
import { BaseLayout } from "@/layouts/BaseLayout"
import { getPosts } from "@/lib/posts"
import { getCollection } from "astro:content"
import * as path from "node:path"
export const getStaticPaths = async () => {
  const tags = await getCollection("categories")
  return tags.map((category) => ({
    params: {
      id: category.id,
    },
    props: {
      category,
    },
  }))
}

const { category } = Astro.props

const posts = await getPosts()

const postsByCategory = posts
  .filter((post) => post.data.categories.some((postCategory) => postCategory.id === category.id))
  .sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime())
---

<BaseLayout title={category.data.title} og={{ url: new URL(path.join("tags", category.id), Astro.site) }}>
  <main class="mx-auto flex w-full max-w-screen-lg flex-1 flex-col gap-8 py-12">
    <header class="flex flex-col gap-6">
      <h1 class="flex flex-row items-center gap-2 text-3xl font-bold sm:text-4xl md:gap-3 md:text-5xl">
        <Icon name={category.data.icon as IconName} class="size-10 sm:size-12 md:size-16" />
        {category.data.title}
      </h1>
      <p class="text-fg-muted sm:text-lg">
        "{category.data.title}"に関連する{postsByCategory.length}件の記事を表示しています。
      </p>
    </header>
    <div class="flex flex-col gap-6">
      <!-- 仮のモックアップ -->
      {
        postsByCategory.map((post, i) => (
          <PostCard
            title={post.data.title}
            icon={post.data.icon as IconName}
            id={post.id}
            body={post.body}
            tags={post.data.tags ?? []}
            categories={post.data.categories.map((category) => category.id)}
            date={post.data.date}
            lastmod={post.data.lastmod}
            animationDelay={160 * i}
          />
        ))
      }
    </div>
  </main>
</BaseLayout>
